CREATE OR REPLACE PROCEDURE REPORT_RECOVERY_COLLECTOR_PRO(BATCH_DATE IN STRING,
																													FLAG       OUT INTEGER) IS
	--上次执行日期(跑批日期)
	V_PROCESSING_DATE DATE;
	--当日逾期的所有案件
	CURSOR CUR_CASE IS
		SELECT *
			FROM REPORT_RECEIVALBLE_BASE B
		 WHERE B.PROCESSING_DATE = TRUNC(SYSDATE)
			 AND B.CURRSECTOR = 'TDC'
			 AND B.CURRCOLLECTOR IS NOT NULL;
	--上批次是否存在案件的数值
	V_COUNT NUMBER;
	--上批次催收员
	V_COLLECTOR VARCHAR2(32);
	--上批次下一还款日
	V_NEXTBILLINGDAY DATE;
	--本期应还款
	V_INTEREST_AMT NUMBER;

BEGIN
	--上次跑批日期赋值
	SELECT TO_DATE(D.VALUE, 'yyyy"年"MM"月"dd"日"')
		INTO V_PROCESSING_DATE
		FROM EDA_DICT D
	 WHERE D.TABLE_NAME = 'PROMPTDATE'
		 AND D.FIELD_NAME = 'PROMPTDATE';

	--插入催收员
	INSERT INTO REPORT_RECOVERY_COLLECTOR
		(PROCESSING_DATE, LOGINNAME, FULLNAME, ORGID, ORGNAME, INSERT_DATE)
		(SELECT TRUNC(SYSDATE),
						U.LOGINNAME,
						U.FULLNAME,
						O.ORGID,
						O.ORGNAME,
						TRUNC(SYSDATE)
			 FROM EDA_USER U, EDA_ORGANIZATION O
			WHERE U.ORGID = O.ORGID
				AND O.BELONG_PLATE = '793'
				AND O.ORGID NOT IN (149, 150));

	--更新催收员目标量
	--比较日期年/月，判断是否本月第一次计算
	IF TO_CHAR(V_PROCESSING_DATE, 'yyyy-MM') = TO_CHAR(SYSDATE, 'yyyy-MM') THEN
		--1
		DBMS_OUTPUT.PUT_LINE('非本月第一次跑批');
	
		UPDATE REPORT_RECOVERY_COLLECTOR C
			 SET C.TARGET_AMT = (SELECT NVL(T.TARGET_AMT, 0)
														 FROM REPORT_RECOVERY_COLLECTOR T
														WHERE T.LOGINNAME = C.LOGINNAME
															AND T.PROCESSING_DATE = V_PROCESSING_DATE)
		 WHERE C.PROCESSING_DATE = TRUNC(SYSDATE);
	
		--循环合同
		FOR EVERYCASE IN CUR_CASE LOOP
			--查询上批次合同
			SELECT COUNT(*)
				INTO V_COUNT
				FROM REPORT_RECEIVALBLE_BASE B
			 WHERE B.PROCESSING_DATE = V_PROCESSING_DATE
				 AND B.CONTRACT_NO = EVERYCASE.CONTRACT_NO;
			--判断是否存在
			IF V_COUNT > 0 THEN
				--2
				--不是新进逾期合同；判断该合同是否更换催收员
				--查询上一批次该合同催收员
				SELECT B.CURRCOLLECTOR, B.NEXTBILLINGDAY
					INTO V_COLLECTOR, V_NEXTBILLINGDAY
					FROM REPORT_RECEIVALBLE_BASE B
				 WHERE B.PROCESSING_DATE = V_PROCESSING_DATE
					 AND B.CONTRACT_NO = EVERYCASE.CONTRACT_NO;
			
				--判断该批次与上批次催收员是否相同
				IF V_COLLECTOR = EVERYCASE.CURRCOLLECTOR THEN
					--3
					--未更换催收员；判断该合同是否升期
					--上批次记录的下一还款日期在两个批次日期之间，说明经过还款日后升期
					IF V_NEXTBILLINGDAY >= V_PROCESSING_DATE AND
						 V_NEXTBILLINGDAY < TRUNC(SYSDATE) THEN
						--4
						--升期；增加该期应还款
						--查询当期应还款
						SELECT NVL(I.INSTALLMENT_AMOUNT, 0)
							INTO V_INTEREST_AMT
							FROM CS_INSTALLMENT I
						 WHERE TO_CHAR(I.DUE_DATE_MONTHLY, 'yyyy-MM') =
									 TO_CHAR(SYSDATE, 'yyyy-MM')
							 AND I.CONTRACT_NO = EVERYCASE.CONTRACT_NO;
						--修改催收员目标量
						UPDATE REPORT_RECOVERY_COLLECTOR C
							 SET C.TARGET_AMT = (NVL(C.TARGET_AMT, 0) + V_INTEREST_AMT)
						 WHERE C.LOGINNAME = EVERYCASE.CURRCOLLECTOR
							 AND C.PROCESSING_DATE = TRUNC(SYSDATE);
					END IF; --4
				
				ELSE
					--3
					--更换催收员；判断该催收员本月是否曾催收此合同
					SELECT COUNT(*)
						INTO V_COUNT
						FROM REPORT_RECEIVALBLE_BASE B
					 WHERE B.PROCESSING_DATE >= TRUNC(SYSDATE, 'MM')
						 AND B.PROCESSING_DATE < TRUNC(SYSDATE)
						 AND B.CONTRACT_NO = EVERYCASE.CONTRACT_NO
						 AND B.CURRCOLLECTOR = EVERYCASE.CURRCOLLECTOR;
					--判断是否曾催收此合同
					IF V_COUNT > 0 THEN
						--4
						--是；判断是否需要增加当期应还金额
						DBMS_OUTPUT.PUT_LINE('');
					ELSE
						--4
						--否；增加该合同逾期金额
						UPDATE REPORT_RECOVERY_COLLECTOR C
							 SET C.TARGET_AMT = (NVL(C.TARGET_AMT, 0) +
																	EVERYCASE.O_D_RENTAL_AMT)
						 WHERE C.LOGINNAME = EVERYCASE.CURRCOLLECTOR
							 AND C.PROCESSING_DATE = TRUNC(SYSDATE);
					END IF; --4
				
				END IF; --3
			ELSE
				--2
				--新进逾期合同；直接增加该催收员目标量
				UPDATE REPORT_RECOVERY_COLLECTOR C
					 SET C.TARGET_AMT = (NVL(C.TARGET_AMT, 0) +
															EVERYCASE.O_D_RENTAL_AMT)
				 WHERE C.LOGINNAME = EVERYCASE.CURRCOLLECTOR
					 AND C.PROCESSING_DATE = TRUNC(SYSDATE);
			END IF; --2
		END LOOP;
	ELSE
		--1
		DBMS_OUTPUT.PUT_LINE('本月第一次跑批');
		UPDATE REPORT_RECOVERY_COLLECTOR C
			 SET C.TARGET_AMT = (SELECT SUM(B.O_D_RENTAL_AMT)
														 FROM REPORT_RECEIVALBLE_BASE B
														WHERE B.CURRCOLLECTOR = C.LOGINNAME
															AND B.PROCESSING_DATE = C.PROCESSING_DATE
															AND B.CURRSECTOR = 'TDC')
		 WHERE C.PROCESSING_DATE = TRUNC(SYSDATE);
	
	END IF; --1

	--计算回款
	UPDATE REPORT_RECOVERY_COLLECTOR C
		 SET (C.RECOVERY_AMT, C.UPDATE_DATE) = (SELECT SUM(B.RECYCLE_RENTAL_AMT),
																									 TRUNC(SYSDATE)
																							FROM REPORT_RECEIVALBLE_BASE B
																						 WHERE B.CURRCOLLECTOR =
																									 C.LOGINNAME
																							 AND B.PROCESSING_DATE >=
																									 TRUNC(V_PROCESSING_DATE,
																												 'MM')
																							 AND B.PROCESSING_DATE <=
																									 TRUNC(V_PROCESSING_DATE)
																							 AND B.CURRSECTOR = 'TDC')
	 WHERE C.PROCESSING_DATE = V_PROCESSING_DATE;
	--计算回收率

	UPDATE REPORT_RECOVERY_COLLECTOR C
		 SET C.RECOVERY_RATE = (CASE WHEN C.TARGET_AMT IS NOT NULL AND C.TARGET_AMT != 0 THEN NVL(C.RECOVERY_AMT, 0) / NVL(C.TARGET_AMT, 0) ELSE 0 END)
	 WHERE C.PROCESSING_DATE = V_PROCESSING_DATE;

END REPORT_RECOVERY_COLLECTOR_PRO;
